

"use client"


import React, {useEffect, useState} from 'react'
import {MoonIcon, SunIcon} from "lucide-react";


export default function DarkmodeToggler() {
    const [isDarkMode, setIsDarkMode] = useState(() => {
        if (typeof window !== 'undefined') {
            const saved = localStorage.getItem('darkMode');
            return saved === 'true';
        }
        return false;
    });

    useEffect(() => {
        if (isDarkMode) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
        localStorage.setItem('darkMode', isDarkMode.toString());
    }, [isDarkMode]);

    const toggleDarkMode = () => {
        setIsDarkMode(!isDarkMode);
    };
    return (
        <div>
            <div className="flex items-center cursor-pointer p-1 rounded-md bg-transparent hover:bg-slate-300 duration-200 dark:hover:bg-slate-800 " onClick={toggleDarkMode}>
                {isDarkMode ? (
                    <SunIcon className="text-slate-600 hover:text-slate-950 dark:text-slate-400 dark:hover:text-slate-200 w-6 h-6"/> // Show moon icon in dark mode
                ) : (
                    <MoonIcon className="text-slate-600 hover:text-slate-950 dark:text-slate-400 dark:hover:text-slate-200 w-6 h-6"/>  // Show sun icon in light mode
                )}

            </div>
        </div>
    )
}



'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { ChevronRight } from 'lucide-react'

interface Job {
  company: string
  role: string
  period: string
  description: string
}

interface WorkExperienceProps {
  workExperience: Job[]
}

export default function WorkExperience({ workExperience }: WorkExperienceProps) {
  const [expandedJob, setExpandedJob] = useState<number | null>(null)

  return (
    <section id="experience" className="w-full mb-16">
      <h2 className="text-2xl font-bold mb-6">Work Experience</h2>
      {workExperience.map((job, index) => (
        <motion.div
          key={index}
          className="mb-6 last:mb-0"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: index * 0.1 }}
        >
          <motion.div
            className="flex items-center bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 cursor-pointer overflow-hidden"
            onClick={() => setExpandedJob(expandedJob === index ? null : index)}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="w-16 h-16 bg-primary text-primary-foreground rounded-l-lg flex items-center justify-center text-2xl font-bold">
              {job.company.charAt(0)}
            </div>
            <div className="flex-grow p-4">
              <h3 className="font-semibold text-lg">{job.company}</h3>
              <p className="text-sm text-muted-foreground">{job.role}</p>
            </div>
            <div className="p-4 text-right">
              <p className="text-sm text-muted-foreground italic">{job.period}</p>
              <motion.div
                animate={{ rotate: expandedJob === index ? 90 : 0 }}
                transition={{ duration: 0.3 }}
              >
                <ChevronRight className="w-5 h-5 text-primary" />
              </motion.div>
            </div>
          </motion.div>
          <AnimatePresence>
            {expandedJob === index && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="bg-gray-50 dark:bg-gray-900 rounded-b-lg shadow-inner"
              >
                <p className="p-4 text-sm text-muted-foreground">{job.description}</p>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      ))}
    </section>
  )
}